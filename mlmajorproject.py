# -*- coding: utf-8 -*-
"""MLMajorproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CyrIIzLWhQcc0znFnhaTERcydSyaOm4T
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn as sk
# %matplotlib inline
plt.style.use('fivethirtyeight')
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler,MinMaxScaler
from sklearn.metrics import r2_score,mean_squared_error

"""# Reading data"""

dstrain=pd.read_excel("Data_Train (1).xlsx")
dstest=pd.read_excel("Data_Test (1).xlsx")

dstrain.describe()

"""# Data Visualization"""

dstrain.Name.value_counts() #here Price depends on the brand and model of the car so lets split the Name column

#extracting brand name and model
brand=[i.split()[0].lower().replace("-","") for i in dstrain["Name"]]
model=[i.split()[1].lower() for i in dstrain["Name"]]
dstrain["Brands"]=brand
dstrain["Model"]=model
brand=[i.split()[0].lower().replace("-","") for i in dstest["Name"]]
model=[i.split()[1].lower() for i in dstest["Name"]]
dstest["Brands"]=brand
dstest["Model"]=model

dstrain.head()

#now lets see the location vs no of cars being sold
plt.figure(figsize=(10,8))
sns.countplot(x="Location",data=dstrain)
plt.xticks(rotation=90)
plt.ylabel("count of cars")
plt.show()

"""#here it seems mumbai has the huge sales but it also depends on the population and which year the car had been in sale

let's find out which year cars has the high sales
"""

plt.figure(figsize=(10,8))
sns.countplot(x="Year",data=dstrain)
plt.xticks(rotation=90)
plt.show()

"""let's see what brands are highly sold"""

plt.figure(figsize=(10,8))
sns.countplot(x="Brands",data=dstrain)
plt.xticks(rotation=90)
plt.show()

"""let's see the fuel types of the cars"""

dstrain.Fuel_Type.value_counts().plot(kind="line",color="red")
dstrain.Fuel_Type.value_counts()

"""let's see the owner_type of the cars """

dstrain.Owner_Type.value_counts().plot(kind="bar",color="darkgreen")
dstrain.Owner_Type.value_counts()

"""here is the Transmission mode of the cars"""

dstrain.Transmission.value_counts().plot(kind="pie",autopct='%1.1f%%')

"""#let's find out the kilometer driven cars and their sales"""

plt.figure(figsize=(10,5))
kmd=[np.percentile(dstrain.Kilometers_Driven,i) for i in range(1,101,1)]
kmdp=[np.percentile(dstrain.Kilometers_Driven,i) for i in range(90,101,1)]
plt.plot(kmd)
plt.plot(kmdp,color="black")
plt.ylabel("No of Cars")
plt.xlabel("Brand name")
plt.show()
dstrain[dstrain["Kilometers_Driven"]>600000].iloc[:,[3,-2]]

"""Seems that kilometers driven less than 600000 are mostly selling

#let's see the influence of brand and owner type on the price
"""

plt.figure(figsize=(10,15))
sns.scatterplot(y=dstrain['Brands'],x=dstrain['Price'],hue=dstrain["Owner_Type"])
plt.title("Price vs Brand with influence of Owner_type")

plt.figure(figsize=(10,15))
plt.title("Price vs year with influence of fuel_type")
sns.scatterplot(y=dstrain["Year"],x=dstrain["Price"],hue=dstrain["Location"])

plt.figure(figsize=(10,15))
plt.title("Price vs year with influence of fuel_type")
sns.scatterplot(y=dstrain["Year"],x=dstrain["Price"],hue=dstrain["Fuel_Type"])

plt.figure(figsize=(10,15))
plt.title("Price vs year with influence of fuel_type")
sns.scatterplot(y=dstrain["Year"],x=dstrain["Price"],hue=dstrain["Transmission"])

plt.figure(figsize=(10,15))
plt.title("Price vs brands with influence of fuel_type")
sns.swarmplot(y=dstrain["Brands"],x=dstrain["Price"],hue=dstrain["Year"])

"""# Null value imputation

**#for train data**
"""

#no of null values
for i in dstrain.columns:
    if dstrain[i].isnull().sum()>0:
        print(i,dstrain[i].isnull().sum())

#splitting the column values from alphanum to numeric data
mlg=[]
eng=[]
pwr=[]
for i,row in dstrain.iterrows():
    try:
        mlg.append(row["Mileage"].split()[0])
    except:
        mlg.append(0)
    try:
        eng.append(row["Engine"].split()[0])
    except:
        eng.append(1)
    
    try:
        if row["Power"].split()[0] == "null":
            pwr.append(0)
        else:
            pwr.append(row["Power"].split()[0])
    except:
        pwr.append(0)

dstrain["mlgcleaned"]=mlg
dstrain["mlgcleaned"]=dstrain["mlgcleaned"].astype("float")
dstrain["engcleaned"]=eng
dstrain["engcleaned"]=dstrain["engcleaned"].astype("float")
dstrain["pwrcleaned"]=pwr
dstrain["pwrcleaned"]=dstrain["pwrcleaned"].astype("float")

#getting the description of train data
dstrain.describe()

#mileage data cleaning
dstrain["mlgcleaned"].loc[(dstrain.mlgcleaned==0)]=dstrain.mlgcleaned.mean()
dstrain["mlgcleaned"]=dstrain["mlgcleaned"].fillna(dstrain.mlgcleaned.mean())

#Engine data cleaning
pm=dstrain[(dstrain.Fuel_Type=="Petrol") & (dstrain.Transmission=="Manual")]["engcleaned"].mean()
dm=dstrain[(dstrain.Fuel_Type=="Diesel") & (dstrain.Transmission=="Manual")]["engcleaned"].mean()
pa=dstrain[(dstrain.Fuel_Type=="Petrol") & (dstrain.Transmission=="Automatic")]["engcleaned"].mean()
da=dstrain[(dstrain.Fuel_Type=="Diesel") & (dstrain.Transmission=="Automatic")]["engcleaned"].mean()
dstrain["engcleaned"].loc[(dstrain.Fuel_Type=="Petrol") & (dstrain.Transmission=="Manual") & (dstrain["Engine"].isnull())]=pm
dstrain["engcleaned"].loc[(dstrain.Fuel_Type=="Petrol") & (dstrain.Transmission=="Automatic") & (dstrain["Engine"].isnull())]=pa
dstrain["engcleaned"].loc[(dstrain.Fuel_Type=="Diesel") & (dstrain.Transmission=="Manual") & (dstrain["Engine"].isnull())]=dm
dstrain["engcleaned"].loc[(dstrain.Fuel_Type=="Diesel") & (dstrain.Transmission=="Automatic") & (dstrain["Engine"].isnull())]=da

#power data cleaing
pwrmissing=[]
for i,j in dstrain[dstrain.pwrcleaned==0].iterrows():
    pwrmissing.append(dstrain[(dstrain.mlgcleaned.between(j.mlgcleaned-20,j.mlgcleaned+20))
                              & (dstrain.engcleaned.between(j.engcleaned-200,j.engcleaned+200))]["pwrcleaned"].mean())
dstrain["pwrcleaned"].loc[(dstrain.pwrcleaned==0)]=pwrmissing

#seats data cleaning
stsmissing=[]
for i,j in dstrain[(dstrain["Seats"].isnull())| (dstrain["Seats"]==0)].iterrows():
    stsmissing.append(round(dstrain[dstrain["Name"].str.match(" ".join((j["Name"].split()[0],j["Name"].split()[1])))]["Seats"]))

j=0
for i in dstrain[(dstrain["Seats"].isnull()) | (dstrain.Seats==0)].index.tolist():
    dstrain.loc[i,["Seats"]]=stsmissing[j]
    j+=1
dstrain.Seats[dstrain.Seats==0]=dstrain["Seats"].mean()
dstrain.Seats=dstrain.Seats.fillna(dstrain["Seats"].mean())

#getting the description of train data after cleaning
dstrain.describe()

#cheching for null values after cleaning
#no of null values
for i in ["Seats","mlgcleaned","engcleaned","pwrcleaned"]:
    if dstrain[i].isnull().sum()>0:
        print(i,dstrain[i].isnull().sum())
    else:
        print(i,"no null values")

"""**#for test data**"""

#no of null values
for i in dstest.columns:
    if dstest[i].isnull().sum()>0:
        print(i,dstrain[i].isnull().sum())

dstest.describe()

#splitting the column values from alphanum to numeric data
tmlg=[]
teng=[]
tpwr=[]
for i,row in dstest.iterrows():
    try:
        tmlg.append(row["Mileage"].split()[0])
    except:
        tmlg.append(0)
    try:
        teng.append(row["Engine"].split()[0])
    except:
        teng.append(1)
    
    try:
        if row["Power"].split()[0] == "null":
            tpwr.append(0)
        else:
            tpwr.append(row["Power"].split()[0])
    except:
        tpwr.append(0)

dstest["mlgcleaned"]=tmlg
dstest["mlgcleaned"]=dstest["mlgcleaned"].astype("float")
dstest["engcleaned"]=teng
dstest["engcleaned"]=dstest["engcleaned"].astype("float")
dstest["pwrcleaned"]=tpwr
dstest["pwrcleaned"]=dstest["pwrcleaned"].astype("float")

#mileage data cleaning
dstrain["mlgcleaned"].loc[(dstrain.mlgcleaned==0)]=dstrain.mlgcleaned.mean()

#Engine data cleaning
tpm=dstest[(dstest.Fuel_Type=="Petrol") & (dstest.Transmission=="Manual")]["engcleaned"].mean()
tdm=dstest[(dstest.Fuel_Type=="Diesel") & (dstest.Transmission=="Manual")]["engcleaned"].mean()
tpa=dstest[(dstest.Fuel_Type=="Petrol") & (dstest.Transmission=="Automatic")]["engcleaned"].mean()
tda=dstest[(dstest.Fuel_Type=="Diesel") & (dstest.Transmission=="Automatic")]["engcleaned"].mean()
dstest["engcleaned"].loc[(dstest.Fuel_Type=="Petrol") & (dstest.Transmission=="Manual") & (dstest["Engine"].isnull())]=tpm
dstest["engcleaned"].loc[(dstest.Fuel_Type=="Petrol") & (dstest.Transmission=="Automatic") & (dstest["Engine"].isnull())]=tpa
dstest["engcleaned"].loc[(dstest.Fuel_Type=="Diesel") & (dstest.Transmission=="Manual") & (dstest["Engine"].isnull())]=tdm
dstest["engcleaned"].loc[(dstest.Fuel_Type=="Diesel") & (dstest.Transmission=="Automatic") & (dstest["Engine"].isnull())]=tda

#Power data cleaning
pwrtmiss=[]
for i,j in dstest[dstest.pwrcleaned==0].iterrows():
    pwrtmiss.append(dstest[(dstest.mlgcleaned.between(j.mlgcleaned-20,j.mlgcleaned+20))
                              & (dstest.engcleaned.between(j.engcleaned-200,j.engcleaned+200))]["pwrcleaned"].mean())
dstest["pwrcleaned"].loc[(dstest.pwrcleaned==0)]=pwrtmiss

#Seats data cleaning
ststmiss=[]
for i,j in dstest[(dstest["Seats"].isnull())| (dstest["Seats"]==0)].iterrows():
    ststmiss.append(round(dstest[dstest["Name"].str.match(" ".join((j["Name"].split()[0],j["Name"].split()[1])))]["Seats"]))

j=0
for i in dstest["Seats"].loc[(dstest["Seats"]).isnull()|(dstest.Seats==0)].index.tolist():
    dstest.loc[i,["Seats"]]=ststmiss[j]
    j+=1
    
dstest.Seats[dstest.Seats==0]=dstest["Seats"].mean()
dstest.Seats=dstest.Seats.fillna(dstest["Seats"].mean())

dstest.describe()

"""# Data Processing

#lets train the model and test it
"""

dstrain.columns

"""Important features are Model, Brand, Year, Kilometers_Drive,milege, engine and power"""

dstrain["below 2000"]=dstrain["Year"].apply(lambda x: 1 if x<=2000 else 0)
dstrain["2001-2005"]=dstrain["Year"].apply(lambda x: 1 if x>2000 and x<=2005 else 0)
dstrain["2005-2010"]=dstrain["Year"].apply(lambda x: 1 if x>2005 and x<=2010 else 0)
dstrain["2010-2015"]=dstrain["Year"].apply(lambda x: 1 if x>2010 and x<=2015 else 0)
dstrain["2015-2020"]=dstrain["Year"].apply(lambda x: 1 if x>2015 and x<=2020 else 0)

high=dstrain[dstrain.Price>45].Brands.unique().tolist()
dstrain["is_mercesdesbenz_high"]=dstrain["Brands"].apply(lambda x: 1 if x in high else 0)
dstrain["is_land_high"]=dstrain["Brands"].apply(lambda x: 1 if x in high else 0)
dstrain["is_bmw_high"]=dstrain["Brands"].apply(lambda x: 1 if x in high else 0)
dstrain["is_audi_high"]=dstrain["Brands"].apply(lambda x: 1 if x in high else 0)
dstrain["is_jaguar_high"]=dstrain["Brands"].apply(lambda x: 1 if x in high else 0)
dstrain["is_porsche_high"]=dstrain["Brands"].apply(lambda x: 1 if x in high else 0)
dstrain["is_ford_high"]=dstrain["Brands"].apply(lambda x: 1 if x in high else 0)
dstrain["is_bentley_high"]=dstrain["Brands"].apply(lambda x: 1 if x in high else 0)
dstrain["is_lamborghini_high"]=dstrain["Brands"].apply(lambda x: 1 if x in high else 0)

d=dstrain[(dstrain.Kilometers_Driven>=600000)].index
dstrain.drop(d,inplace=True)
for i in ["Kilometers_Driven","mlgcleaned","pwrcleaned","engcleaned"]:
    dstrain[i]=MinMaxScaler(feature_range=(0,1)).fit_transform(dstrain[i].values.astype("float").reshape(-1,1))

dstrain = pd.get_dummies(dstrain,columns = ["Model","Brands"],drop_first = True)

target=dstrain.Price
dstrain_final=dstrain.drop(["Price"],axis=1)

dstrain_final.drop(['Name', 'Location', 'Year','Fuel_Type','Transmission',"Owner_Type", 'Mileage', 'Engine','Power', 'Seats'],axis=1,inplace=True)

"""# Train test split"""

X_train,X_test,y_train,y_test=train_test_split(dstrain_final,target,test_size = 0.3,random_state = 42)

X_train.shape,X_test.shape

standardScaler = StandardScaler()
standardScaler.fit(X_train)
X_train = standardScaler.transform(X_train)
X_test = standardScaler.transform(X_test)

"""# Linear Regression Model"""

linearRegression = LinearRegression()
linearRegression.fit(X_train, y_train)
y_pred = linearRegression.predict(X_test)
r2_score(y_test, y_pred)

print("Accuracy :",(linearRegression.score(X_test,y_test)*100)**2,'%')

"""It seems Linear regression is a Very poor model for our prediction!..

# Random Forest Regression Model
"""

rf = RandomForestRegressor(n_estimators = 100)
rf.fit(X_train, y_train)
y_pred = rf.predict(X_test)
r2_score(y_test, y_pred)

rms=mean_squared_error(y_test, y_pred)
rms

print("Accuracy :",rf.score(X_test,y_test)*100,'%')

"""#hence randomforest regression can be the good model to predict the price"""

dstest.columns

dstest["below 2000"]=dstest["Year"].apply(lambda x: 1 if x<=2000 else 0)
dstest["2001-2005"]=dstest["Year"].apply(lambda x: 1 if x>2000 and x<=2005 else 0)
dstest["2005-2010"]=dstest["Year"].apply(lambda x: 1 if x>2005 and x<=2010 else 0)
dstest["2010-2015"]=dstest["Year"].apply(lambda x: 1 if x>2010 and x<=2015 else 0)
dstest["2015-2020"]=dstest["Year"].apply(lambda x: 1 if x>2015 and x<=2020 else 0)

d=dstest[(dstest.Kilometers_Driven>=600000)].index
dstest.drop(d,inplace=True)
for i in ["Kilometers_Driven","mlgcleaned","pwrcleaned","engcleaned"]:
    dstest[i]=MinMaxScaler(feature_range=(0,1)).fit_transform(dstest[i].values.astype("float").reshape(-1,1))

dstest = pd.get_dummies(dstest,columns = ["Model","Brands"],drop_first = True)

dstest.drop(['Name', 'Location', 'Year','Fuel_Type',
       'Transmission', 'Owner_Type', 'Mileage', 'Engine', 'Power', 'Seats'],axis=1,inplace=True)

dstest_final=dstest

dstest_final.shape

ds=pd.merge(dstrain_final,dstest_final,how="left")

ds.shape,dstrain_final.shape

ds.dropna(how='any',axis=1,inplace=True)

ds.shape,dstest_final.shape,dstrain_final.shape

#using randomforest regression model for prediction
ypred=rf.predict(ds)
ypred=ypred.round(2)
ypred

res = pd.DataFrame(ypred)
res.reset_index
res.columns = ["price"]
res.to_excel("price.xlsx")

"""# KNN model"""

from sklearn.neighbors import KNeighborsRegressor 
knnr = KNeighborsRegressor(n_neighbors = 10)
knnr.fit(X_train, y_train)
y_pred = knnr.predict(X_test)
r2_score(y_test, y_pred)

rms=mean_squared_error(y_test, y_pred)
rms

print ("The MSE is:",format(np.power(target - knnr.predict(dstrain_final),2).mean()))
print("Accuracy is:",knnr.score(X_test,y_test)*100,'%')

"""#knn can also be used to predict the prices so lets do it"""

knnpred=knnr.predict(ds)
knnpred.round(2)

"""# SVM model for regression"""

from sklearn.svm import SVR
regressor = SVR(kernel = 'linear')
regressor.fit(X_train, y_train)
y_pred = regressor.predict(X_test)
r2_score(y_test, y_pred)
print("Accuracy is:",regressor.score(X_test,y_test)*100,'%')

"""  **Among the above models random forest regression is more accurate one in prediction**"""